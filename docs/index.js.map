{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Button.ts","webpack:///./src/Food.ts","webpack:///./src/Matrix.ts","webpack:///./src/NeuralNet.ts","webpack:///./src/Population.ts","webpack:///./src/Snake.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"./index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","/// <reference path=\"./global.d.ts\" />\n\nimport * as p5_global from \"p5/global\"\nimport * as p5 from \"p5\"\n\nexport class Button\n{\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n    text: string;\n\n    constructor(x: number, y: number, w: number, h: number, text: string)\n    {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n        this.text = text;\n    }\n\n    collide(x: number, y: number)\n    {\n        return x >= this.x - this.w / 2 && \n            x <= this.x + this.w / 2 && \n            y >= this.y - this.h / 2 && \n            y <= this.y + this.h / 2;\n    }\n\n    show()\n    {\n        fill(255);\n        stroke(0);\n        rectMode(CENTER);\n        rect(this.x, this.y, this.w, this.h);\n        textSize(22);\n        textAlign(CENTER, CENTER);\n        fill(0);\n        noStroke();\n        text(this.text, this.x, this.y - 3);\n    }\n}","/// <reference path=\"./global.d.ts\" />\r\n\r\nimport * as p5_global from \"p5/global\"\r\nimport * as p5 from \"p5\"\r\n\r\nexport class Food\r\n{\r\n    position: p5.Vector;\r\n\r\n    constructor()\r\n    {\r\n        let x: number = Math.floor(random(0, SIZE));\r\n        let y: number = Math.floor(random(0, SIZE));\r\n\r\n        this.position = createVector(x, y);\r\n    }\r\n\r\n    show(x: number = 0, y: number = 0)\r\n    {\r\n        stroke(0);\r\n        fill(255, 0, 0);\r\n        rect(x + this.position.x * DPC, y + this.position.y * DPC, DPC, DPC);\r\n    }\r\n\r\n    clone()\r\n    {\r\n        let clone = new Food();\r\n\r\n        clone.position.x = this.position.x;\r\n        clone.position.y = this.position.y;\r\n\r\n        return clone;\r\n    }\r\n}\r\n","/// <reference path=\"./global.d.ts\" />\r\n\r\nimport * as p5_global from \"p5/global\"\r\nimport * as p5 from \"p5\"\r\n\r\nexport class Matrix\r\n{\r\n    rows: number;\r\n    cols: number;\r\n    matrix: number[][];\r\n\r\n    constructor(r: number, c: number)\r\n    {\r\n        this.rows = r;\r\n        this.cols = c;\r\n        this.matrix = []\r\n\r\n        for (let y = 0; y < r; y++)\r\n        {\r\n            this.matrix[y] = [];\r\n        }\r\n    }\r\n\r\n    static FromMatrix(other: number[][]): Matrix\r\n    {\r\n        const matrix = new Matrix(0, 0);\r\n\r\n        matrix.matrix = other;\r\n        matrix.rows = other.length;\r\n        matrix.cols = other[0].length;\r\n\r\n        return matrix;\r\n    }\r\n\r\n    dot(other: Matrix): Matrix\r\n    {\r\n        const result = new Matrix(this.rows, other.cols);\r\n\r\n        if (this.cols == other.rows)\r\n        {\r\n            for (let i = 0; i < this.rows; i++)\r\n            {\r\n                for (let j = 0; j < other.cols; j++)\r\n                {\r\n                    let sum = 0;\r\n                    for (let k = 0; k < this.cols; k++)\r\n                    {\r\n                        sum += this.matrix[i][k] * other.matrix[k][j];\r\n                    }\r\n                    result.matrix[i][j] = sum;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            console.warn(\"Matrix: this.cols not equals other.rows in dot function\")\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    randomize(): void\r\n    {\r\n        for (let i = 0; i < this.rows; i++)\r\n        {\r\n            for (let j = 0; j < this.cols; j++)\r\n            {\r\n                this.matrix[i][j] = random(-1, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    static singleColumnMatrixFromArray(array: number[]): Matrix\r\n    {\r\n        const n = new Matrix(array.length, 1);\r\n\r\n        for (let i = 0; i < array.length; i++)\r\n        {\r\n            n.matrix[i][0] = array[i];\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    toArray(): number[]\r\n    {\r\n        const array: number[] = []\r\n\r\n        for (let i = 0; i < this.rows; i++)\r\n        {\r\n            for (let j = 0; j < this.cols; j++)\r\n            {\r\n                array[j + i * this.cols] = this.matrix[i][j];\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    addBias(): Matrix\r\n    {\r\n        const n = new Matrix(this.rows + 1, 1);\r\n\r\n        for (let i = 0; i < this.rows; i++)\r\n        {\r\n            n.matrix[i][0] = this.matrix[i][0];\r\n        }\r\n\r\n        n.matrix[this.rows][0] = 1;\r\n\r\n        return n;\r\n    }\r\n\r\n    activate()\r\n    {\r\n        const n = new Matrix(this.rows, this.cols);\r\n\r\n        for (let i = 0; i < this.rows; i++)\r\n        {\r\n            for (let j = 0; j < this.cols; j++)\r\n            {\r\n                n.matrix[i][j] = this.relu(this.matrix[i][j]);\r\n            }\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    relu(x: number)\r\n    {\r\n        return max(0, x);\r\n    }\r\n\r\n    mutate(mutationRate: number)\r\n    {\r\n        for (let i = 0; i < this.rows; i++)\r\n        {\r\n            for (let j = 0; j < this.cols; j++)\r\n            {\r\n                const rand = random(0, 1);\r\n\r\n                if (rand < mutationRate)\r\n                {\r\n                    this.matrix[i][j] += randomGaussian(0, 1) / 5;\r\n\r\n                    if (this.matrix[i][j] > 1)\r\n                    {\r\n                        this.matrix[i][j] = 1;\r\n                    }\r\n                    if (this.matrix[i][j] < -1)\r\n                    {\r\n                        this.matrix[i][j] = -1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    crossover(other: Matrix): Matrix\r\n    {\r\n        const child = new Matrix(this.rows, this.cols);\r\n\r\n        const randC = Math.floor(random(this.cols));\r\n        const randR = Math.floor(random(this.rows));\r\n\r\n        for (let i = 0; i < this.rows; i++)\r\n        {\r\n            for (let j = 0; j < this.cols; j++)\r\n            {\r\n                if ((i < randR) || (i == randR && j <= randC))\r\n                {\r\n                    child.matrix[i][j] = this.matrix[i][j];\r\n                } else\r\n                {\r\n                    child.matrix[i][j] = other.matrix[i][j];\r\n                }\r\n            }\r\n        }\r\n        return child;\r\n    }\r\n\r\n    clone(): Matrix\r\n    {\r\n        const clone = new Matrix(this.rows, this.cols);\r\n\r\n        for (let i = 0; i < this.rows; i++)\r\n        {\r\n            for (let j = 0; j < this.cols; j++)\r\n            {\r\n                clone.matrix[i][j] = this.matrix[i][j];\r\n            }\r\n        }\r\n\r\n        return clone;\r\n    }\r\n}\r\n","/// <reference path=\"./global.d.ts\" />\r\n\r\nimport * as p5_global from \"p5/global\"\r\nimport * as p5 from \"p5\"\r\n\r\nimport { Matrix } from \"./Matrix\";\r\n\r\nexport class NeuralNet\r\n{\r\n    iNodes: number;\r\n    hNodes: number;\r\n    oNodes: number;\r\n    hLayers: number;\r\n    weights: Matrix[];\r\n\r\n    constructor(input: number, hidden: number, output: number, hiddenLayers: number)\r\n    {\r\n        this.iNodes = input;\r\n        this.hNodes = hidden;\r\n        this.oNodes = output;\r\n        this.hLayers = hiddenLayers;\r\n\r\n        this.weights = [];\r\n        this.weights.push(new Matrix(this.hNodes, this.iNodes + 1));\r\n        for (let i = 1; i < this.hLayers; i++)\r\n        {\r\n            this.weights.push(new Matrix(this.hNodes, this.hNodes + 1));\r\n        }\r\n        this.weights.push(new Matrix(this.oNodes, this.hNodes + 1));\r\n\r\n        for (let w of this.weights)\r\n        {\r\n            w.randomize();\r\n        }\r\n    }\r\n\r\n    mutate(mr: number)\r\n    {\r\n        for (let w of this.weights)\r\n        {\r\n            w.mutate(mr);\r\n        }\r\n    }\r\n\r\n    output(inputsArr: number[]): number[]\r\n    {\r\n        let inputs = Matrix.singleColumnMatrixFromArray(inputsArr);\r\n        let curr_bias = inputs.addBias();\r\n\r\n        for (let i = 0; i < this.hLayers; i++)\r\n        {\r\n            let hidden_ip = this.weights[i].dot(curr_bias);\r\n            let hidden_op = hidden_ip.activate();\r\n            curr_bias = hidden_op.addBias();\r\n        }\r\n\r\n        let output_ip = this.weights[this.weights.length - 1].dot(curr_bias);\r\n        let output = output_ip.activate();\r\n\r\n        return output.toArray();\r\n    }\r\n\r\n    crossover(partner: NeuralNet): NeuralNet\r\n    {\r\n        let child = new NeuralNet(this.iNodes, this.hNodes, this.oNodes, this.hLayers);\r\n        for (let i = 0; i < this.weights.length; i++)\r\n        {\r\n            child.weights[i] = this.weights[i].crossover(partner.weights[i]);\r\n        }\r\n        return child;\r\n    }\r\n\r\n    clone(): NeuralNet\r\n    {\r\n        let clone = new NeuralNet(this.iNodes, this.hNodes, this.oNodes, this.hLayers);\r\n        for (let i = 0; i < this.weights.length; i++)\r\n        {\r\n            clone.weights[i] = this.weights[i].clone();\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    load(weights: Matrix[]): void\r\n    {\r\n        for (let i = 0; i < this.weights.length; i++)\r\n        {\r\n            this.weights[i] = weights[i];\r\n        }\r\n    }\r\n\r\n    pull(): Matrix[]\r\n    {\r\n        let model: Matrix[] = []\r\n\r\n        for (let w of this.weights)\r\n        {\r\n            model.push(w.clone());\r\n        }\r\n\r\n        return model;\r\n    }\r\n\r\n    show(x: number, y: number, w: number, h: number, vision: number[], decision: number[])\r\n    {\r\n        let space = 5;\r\n        let nSize = (h - (space * (this.iNodes - 2))) / this.iNodes;\r\n        let nSpace = (w - (this.weights.length * nSize)) / this.weights.length;\r\n        let hBuff = (h - (space * (this.hNodes - 1)) - (nSize * this.hNodes)) / 2;\r\n        let oBuff = (h - (space * (this.oNodes - 1)) - (nSize * this.oNodes)) / 2;\r\n\r\n        let maxIndex = 0;\r\n\r\n        for (let i = 1; i < decision.length; i++)\r\n        {\r\n            if (decision[i] > decision[maxIndex])\r\n            {\r\n                maxIndex = i;\r\n            }\r\n        }\r\n\r\n        let layer = 0;\r\n\r\n        // DRAW NODES\r\n\r\n        // Draw inputs\r\n        for (let i = 0; i < this.iNodes; i++)\r\n        {\r\n            if (vision[i] != 0)\r\n            {\r\n                fill(0, 255, 0);\r\n            } else\r\n            {\r\n                fill(255);\r\n            }\r\n            stroke(0);\r\n            ellipseMode(CORNER);\r\n            ellipse(x, y + (i * (nSize + space)), nSize, nSize);\r\n            textSize(nSize / 2);\r\n            textAlign(CENTER, CENTER);\r\n            fill(0);\r\n            text(i, x + (nSize / 2), y + (nSize / 2) + (i * (nSize + space)));\r\n        }\r\n\r\n        layer++;\r\n\r\n        // Draw hidden\r\n        for (let a = 0; a < this.hLayers; a++)\r\n        {\r\n            for (let i = 0; i < this.hNodes; i++)\r\n            {\r\n                fill(255);\r\n                stroke(0);\r\n                ellipseMode(CORNER);\r\n                ellipse(x + (layer * nSize) + (layer * nSpace), y + hBuff + (i * (nSize + space)), nSize, nSize);\r\n            }\r\n\r\n            layer++;\r\n        }\r\n\r\n        // Draw outputs\r\n        for (let i = 0; i < this.oNodes; i++)\r\n        {\r\n            if (i == maxIndex)\r\n            {\r\n                fill(0, 255, 0);\r\n            } else\r\n            {\r\n                fill(255);\r\n            }\r\n            stroke(0);\r\n            ellipseMode(CORNER);\r\n            ellipse(x + (layer * nSpace) + (layer * nSize), y + oBuff + (i * (nSize + space)), nSize, nSize);\r\n        }\r\n\r\n        layer = 1;\r\n\r\n        // DRAW WEIGHTS\r\n\r\n        // Input to hidden\r\n        for (let i = 0; i < this.weights[0].rows; i++)\r\n        { \r\n            for (let j = 0; j < this.weights[0].cols - 1; j++)\r\n            {\r\n                if (this.weights[0].matrix[i][j] < 0)\r\n                {\r\n                    stroke(255, 0, 0);\r\n                } else\r\n                {\r\n                    stroke(0, 0, 255);\r\n                }\r\n                line(x + nSize, y + (nSize / 2) + (j * (space + nSize)), x + nSize + nSpace, y + hBuff + (nSize / 2) + (i * (space + nSize)));\r\n            }\r\n        }\r\n\r\n        layer++;\r\n\r\n        // Hidden to hidden\r\n        for (let a = 1; a < this.hLayers; a++)\r\n        {\r\n            for (let i = 0; i < this.weights[a].rows; i++)\r\n            {\r\n                for (let j = 0; j < this.weights[a].cols - 1; j++)\r\n                {\r\n                    if (this.weights[a].matrix[i][j] < 0)\r\n                    {\r\n                        stroke(255, 0, 0);\r\n                    } else\r\n                    {\r\n                        stroke(0, 0, 255);\r\n                    }\r\n                    line(x + (layer * nSize) + ((layer - 1) * nSpace), y + hBuff + (nSize / 2) + (j * (space + nSize)), x + (layer * nSize) + (layer * nSpace), y + hBuff + (nSize / 2) + (i * (space + nSize)));\r\n                }\r\n            }\r\n            layer++;\r\n        }\r\n\r\n        // Hidden to output\r\n        for (let i = 0; i < this.weights[this.weights.length - 1].rows; i++)\r\n        {\r\n            for (let j = 0; j < this.weights[this.weights.length - 1].cols - 1; j++)\r\n            {\r\n                if (this.weights[this.weights.length - 1].matrix[i][j] < 0)\r\n                {\r\n                    stroke(255, 0, 0);\r\n                } else\r\n                {\r\n                    stroke(0, 0, 255);\r\n                }\r\n                line(x + (layer * nSize) + ((layer - 1) * nSpace), y + hBuff + (nSize / 2) + (j * (space + nSize)), x + (layer * nSize) + (layer * nSpace), y + oBuff + (nSize / 2) + (i * (space + nSize)));\r\n            }\r\n        }\r\n\r\n        fill(0);\r\n        textSize(15);\r\n        textAlign(CENTER, CENTER);\r\n        text(\"U\", x + (layer * nSize) + (layer * nSpace) + nSize / 2, y + oBuff + (nSize / 2));\r\n        text(\"D\", x + (layer * nSize) + (layer * nSpace) + nSize / 2, y + oBuff + space + nSize + (nSize / 2));\r\n        text(\"L\", x + (layer * nSize) + (layer * nSpace) + nSize / 2, y + oBuff + (2 * space) + (2 * nSize) + (nSize / 2));\r\n        text(\"R\", x + (layer * nSize) + (layer * nSpace) + nSize / 2, y + oBuff + (3 * space) + (3 * nSize) + (nSize / 2));\r\n    }\r\n}\r\n","/// <reference path=\"./global.d.ts\" />\r\n\r\nimport * as p5_global from \"p5/global\"\r\nimport * as p5 from \"p5\"\r\n\r\nimport { Snake } from \"./Snake\";\r\n\r\nexport class Population\r\n{\r\n    snakes: Snake[];\r\n    bestSnake: Snake;\r\n\r\n    bestSnakeScore: number = 0;\r\n    gen: number = 0;\r\n    samebest: number = 0;\r\n\r\n    bestFitness: number = 0;\r\n    fitnessSum: number = 0;\r\n\r\n    constructor(size: number)\r\n    {\r\n        this.snakes = []\r\n        for (let i = 0; i < size; i++)\r\n        {\r\n            this.snakes[i] = new Snake();\r\n        }\r\n        this.bestSnake = this.snakes[0].clone();\r\n        this.bestSnake.replay = true;\r\n    }\r\n\r\n    /**\r\n     * Check if all the snakes in the population are dead.\r\n     */\r\n    done(): boolean\r\n    {\r\n        for (let i = 0; i < this.snakes.length; i++)\r\n        {\r\n            if (!this.snakes[i].dead)\r\n                return false;\r\n        }\r\n        if (!this.bestSnake.dead)\r\n        {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Update all the snakes in the generation.\r\n     */\r\n    update(): void\r\n    {\r\n        // If the best snake is not dead update it, this snake is a replay of the best from the past generation\r\n        if (!this.bestSnake.dead)\r\n        {\r\n            this.bestSnake.look();\r\n            this.bestSnake.think();\r\n            this.bestSnake.move();\r\n        }\r\n        for (let i = 0; i < this.snakes.length; i++)\r\n        {\r\n            if (!this.snakes[i].dead)\r\n            {\r\n                this.snakes[i].look();\r\n                this.snakes[i].think();\r\n                this.snakes[i].move();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show either the best snake or all the snakes.\r\n     */\r\n    show(x: number = 0, y: number = 0): void\r\n    {\r\n        // Show the brain of the best snake\r\n        if (replayBest)\r\n        {\r\n            this.bestSnake.show(x + 400, y);\r\n            this.bestSnake.brain.show(x, y, 360, 790, this.bestSnake.vision, this.bestSnake.decision);\r\n        }\r\n        else\r\n        {\r\n            for (let i = 0; i < this.snakes.length; i++)\r\n            {\r\n                this.snakes[i].show(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the best snake of the generation.\r\n     */\r\n    setBestSnake(): void\r\n    {\r\n        let max = 0;\r\n        let maxIndex = 0;\r\n\r\n        for (let i = 0; i < this.snakes.length; i++)\r\n        {\r\n            if (this.snakes[i].fitness > max)\r\n            {\r\n                max = this.snakes[i].fitness;\r\n                maxIndex = i;\r\n            }\r\n        }\r\n\r\n        if (max > this.bestFitness)\r\n        {\r\n            this.bestFitness = max;\r\n            this.bestSnake = this.snakes[maxIndex].cloneForReplay();\r\n            this.bestSnakeScore = this.snakes[maxIndex].score;\r\n        }\r\n        else\r\n        {\r\n            this.bestSnake = this.bestSnake.cloneForReplay();\r\n        }\r\n    }\r\n\r\n    // Selects a random number in range of the fitnesssum and if a snake falls in that range then select it.\r\n    selectParent(): Snake\r\n    {\r\n        let rand = random(this.fitnessSum);\r\n        let summation = 0;\r\n        for (let i = 0; i < this.snakes.length; i++)\r\n        {\r\n            summation += this.snakes[i].fitness;\r\n            if (summation > rand)\r\n            {\r\n                return this.snakes[i];\r\n            }\r\n        }\r\n        return this.snakes[0];\r\n    }\r\n\r\n    naturalSelection(): void\r\n    {\r\n        let newSnakes = [];\r\n\r\n        this.setBestSnake();\r\n        this.calculateFitnessSum();\r\n\r\n        // Add the best snake of the prior generation into the new generation\r\n        newSnakes[0] = this.bestSnake.clone();\r\n\r\n        for (let i = 1; i < this.snakes.length; i++)\r\n        {\r\n            let child = this.selectParent().crossover(this.selectParent());\r\n\r\n            child.mutate();\r\n\r\n            newSnakes[i] = child;\r\n        }\r\n\r\n        this.snakes = [];\r\n\r\n        for (let s of newSnakes)\r\n        {\r\n            this.snakes.push(s.clone());\r\n        }\r\n\r\n        this.gen += 1;\r\n    }\r\n\r\n    mutate(): void\r\n    {\r\n        // Start from 1 as to not override the best snake placed in index 0\r\n        for (let i = 1; i < this.snakes.length; i++)\r\n        {\r\n            this.snakes[i].mutate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate the fitnesses for each snake.\r\n     */\r\n    calculateFitness(): void\r\n    {\r\n        for (let i = 0; i < this.snakes.length; i++)\r\n        {\r\n            this.snakes[i].calculateFitness();\r\n        }\r\n    }\r\n\r\n    // Calculate the sum of all the snakes fitnesses.\r\n    calculateFitnessSum(): void\r\n    {\r\n        this.fitnessSum = 0;\r\n        for (let i = 0; i < this.snakes.length; i++)\r\n        {\r\n            this.fitnessSum += this.snakes[i].fitness;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./global.d.ts\" />\r\n\r\nimport * as p5_global from \"p5/global\"\r\nimport * as p5 from \"p5\"\r\n\r\nimport { Food } from \"./Food\";\r\nimport { NeuralNet } from \"./NeuralNet\";\r\n\r\nexport class Snake\r\n{\r\n    score: number = 1;\r\n    lifeLeft: number = 200; // Mount of moves the snake can make before it dies\r\n    lifetime: number = 0;\r\n    direction: p5.Vector = createVector(0, 0); // Amount of time the snake has been alive\r\n    currentFoodIndex: number = 0; // Index to run through the foodlist (used for replay)\r\n\r\n    fitness: number = 0;\r\n\r\n    dead: boolean = false;\r\n    replay: boolean = false; // If this snake is a replay of best snake\r\n\r\n    vision: number[];  // Snakes vision\r\n    decision: number[];  // Snakes decision\r\n\r\n    head: p5.Vector;\r\n    body: p5.Vector[]; // Snakes body\r\n    foodList: Food[]; // List of food positions (used to replay the best snake)\r\n    food: Food;\r\n    brain: NeuralNet;\r\n\r\n    constructor(layers: number = null)\r\n    {\r\n        if (layers == null)\r\n        {\r\n            layers = HIDDEN_LARYERS;\r\n        }\r\n\r\n        this.head = createVector(SIZE / 2, SIZE / 2);\r\n        this.food = new Food();\r\n        this.body = [];\r\n\r\n        if (!humanPlaying)\r\n        {\r\n            this.vision = new Array<number>(24)\r\n            this.decision = new Array<number>(4)\r\n            this.foodList = [this.food.clone()]\r\n            this.brain = new NeuralNet(24, HIDDEN_NODES, 4, layers);\r\n            this.body.push(createVector(SIZE / 2, (SIZE / 2) + 1));\r\n            this.body.push(createVector(SIZE / 2, (SIZE / 2) + 2));\r\n            this.score += 2;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This factory passes in a list of food positions so that a replay can replay the best snake.\r\n     * @param foods \r\n     */\r\n    static FromFoods(foods: Food[]): Snake\r\n    {\r\n        let snake = new Snake();\r\n\r\n        snake.replay = true;\r\n        snake.vision = new Array<number>(24);\r\n        snake.decision = new Array<number>(4);\r\n        snake.body = [];\r\n        snake.foodList = [];\r\n\r\n        // Clone all the food positions in the foodlist\r\n        for (let f of foods)\r\n        {\r\n            snake.foodList.push(f.clone());\r\n        }\r\n\r\n        snake.food = snake.foodList[snake.currentFoodIndex++];\r\n        snake.head = createVector(SIZE / 2, SIZE / 2);\r\n        snake.body.push(createVector(SIZE / 2, (SIZE / 2) + 1));\r\n        snake.body.push(createVector(SIZE / 2, (SIZE / 2) + 2));\r\n        snake.score += 2;\r\n\r\n        return snake;\r\n    }\r\n\r\n    /**\r\n     * Check if a position collides with the snakes body.\r\n     * @param x \r\n     * @param y \r\n     */\r\n    bodyCollide(x: number, y: number): boolean\r\n    {\r\n        for (let i = 0; i < this.body.length; i++)\r\n        {\r\n            if (x == this.body[i].x && y == this.body[i].y)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check if a position collides with the food.\r\n     * @param x \r\n     * @param y \r\n     */\r\n    foodCollide(x: number, y: number): boolean\r\n    {\r\n        return x == this.food.position.x && y == this.food.position.y;\r\n    }\r\n\r\n    /**\r\n     * Check if a position collides with the wall.\r\n     * @param x \r\n     * @param y \r\n     */\r\n    wallCollide(x: number, y: number): boolean\r\n    {\r\n        return x >= SIZE || x < 0 || y >= SIZE || y < 0;\r\n    }\r\n\r\n    show(x: number = 0, y: number = 0): void\r\n    {\r\n        fill(100);\r\n        rect(x, y, SIZE * DPC, SIZE * DPC);\r\n        \r\n        this.food.show(x, y);\r\n\r\n        fill(255);\r\n        stroke(0);\r\n\r\n        for (let i = 0; i < this.body.length; i++)\r\n        {\r\n            rect(x + this.body[i].x * DPC, y + this.body[i].y * DPC, DPC, DPC);\r\n        }\r\n\r\n        if (this.dead)\r\n        {\r\n            fill(150);\r\n        }\r\n        else\r\n        {\r\n            fill(255);\r\n        }\r\n\r\n        rect(x + this.head.x * DPC, y + this.head.y * DPC, DPC, DPC);\r\n    }\r\n\r\n    /**\r\n     * Move the snake.\r\n     */\r\n    move(): void\r\n    {\r\n        if (this.dead)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        if (!humanPlaying && !modelLoaded)\r\n        {\r\n            this.lifetime++;\r\n            this.lifeLeft--;\r\n        }\r\n\r\n        if (this.foodCollide(this.head.x, this.head.y))\r\n        {\r\n            this.eat();\r\n        }\r\n\r\n        this.shiftBody();\r\n\r\n        if (this.wallCollide(this.head.x, this.head.y))\r\n        {\r\n            this.dead = true;\r\n        }\r\n        else if (this.bodyCollide(this.head.x, this.head.y))\r\n        {\r\n            this.dead = true;\r\n        }\r\n        else if (this.lifeLeft <= 0 && !humanPlaying)\r\n        {\r\n            this.dead = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Eat food.\r\n     */\r\n    eat(): void\r\n    {\r\n        let last = this.body.length - 1;\r\n\r\n        this.score++;\r\n        \r\n        if (!humanPlaying && !modelLoaded)\r\n        {\r\n            if (this.lifeLeft < 500)\r\n            {\r\n                if (this.lifeLeft > 400)\r\n                {\r\n                    this.lifeLeft = 500;\r\n                } else\r\n                {\r\n                    this.lifeLeft += 100;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (last >= 0)\r\n        {\r\n            this.body.push(createVector(this.body[last].x, this.body[last].y));\r\n        }\r\n        else\r\n        {\r\n            this.body.push(createVector(this.head.x, this.head.y));\r\n        }\r\n\r\n        if (!this.replay)\r\n        {\r\n            this.food = new Food();\r\n\r\n            while (this.bodyCollide(this.food.position.x, this.food.position.y))\r\n            {\r\n                this.food = new Food();\r\n            }\r\n            if (!humanPlaying)\r\n            {\r\n                this.foodList.push(this.food);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // If the snake is a replay, then we don't want to create new random foods, \r\n            // we want to see the positions the best snake had to collect\r\n            this.food = this.foodList[this.currentFoodIndex++];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shift the body to follow the head.\r\n     */\r\n    shiftBody(): void\r\n    {\r\n        let prevX = this.head.x;\r\n        let prevY = this.head.y;\r\n        \r\n        this.head.x += this.direction.x;\r\n        this.head.y += this.direction.y;\r\n\r\n        for (let i = 0; i < this.body.length; i++)\r\n        {\r\n            const x = prevX;\r\n            const y = prevY;\r\n\r\n            prevX = this.body[i].x;\r\n            prevY = this.body[i].y;\r\n\r\n            this.body[i].x = x;\r\n            this.body[i].y = y;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone a version of the snake that will be used for a replay.\r\n     */\r\n    cloneForReplay(): Snake\r\n    {\r\n        const clone = Snake.FromFoods(this.foodList);\r\n\r\n        clone.brain = this.brain.clone();\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Clone the snake.\r\n     */\r\n    clone(): Snake\r\n    {\r\n        const clone = new Snake(HIDDEN_LARYERS);\r\n\r\n        clone.brain = this.brain.clone();\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Crossover the snake with another snake.\r\n     * @param parent \r\n     */\r\n    crossover(parent: Snake): Snake\r\n    {\r\n        let child = new Snake(HIDDEN_LARYERS);\r\n\r\n        child.brain = this.brain.crossover(parent.brain);\r\n\r\n        return child;\r\n    }\r\n\r\n    /**\r\n     * Mutate the snakes brain.\r\n     */\r\n    mutate(): void\r\n    {\r\n        this.brain.mutate(mutationRate);\r\n    }\r\n\r\n    /**\r\n     * Calculate the fitness of the snake.\r\n     */\r\n    calculateFitness(): void\r\n    {\r\n        if (this.score < 10)\r\n        {\r\n            this.fitness = floor(this.lifetime * this.lifetime) * pow(2, this.score);\r\n        }\r\n        else\r\n        {\r\n            this.fitness = floor(this.lifetime * this.lifetime);\r\n            this.fitness *= pow(2, 10);\r\n            this.fitness *= (this.score - 9);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Look in all 8 directions and check for food, body and wall.\r\n     */\r\n    look()\r\n    {\r\n        this.vision = [];\r\n\r\n        let temp = this.lookInDirection(createVector(-1, 0));\r\n\r\n        this.vision[0] = temp[0];\r\n        this.vision[1] = temp[1];\r\n        this.vision[2] = temp[2];\r\n        \r\n        temp = this.lookInDirection(createVector(-1, -1));\r\n\r\n        this.vision[3] = temp[0];\r\n        this.vision[4] = temp[1];\r\n        this.vision[5] = temp[2];\r\n\r\n        temp = this.lookInDirection(createVector(0, -1));\r\n\r\n        this.vision[6] = temp[0];\r\n        this.vision[7] = temp[1];\r\n        this.vision[8] = temp[2];\r\n\r\n        temp = this.lookInDirection(createVector(1, -1));\r\n\r\n        this.vision[9] = temp[0];\r\n        this.vision[10] = temp[1];\r\n        this.vision[11] = temp[2];\r\n\r\n        temp = this.lookInDirection(createVector(1, 0));\r\n        \r\n        this.vision[12] = temp[0];\r\n        this.vision[13] = temp[1];\r\n        this.vision[14] = temp[2];\r\n\r\n        temp = this.lookInDirection(createVector(1, 1));\r\n        \r\n        this.vision[15] = temp[0];\r\n        this.vision[16] = temp[1];\r\n        this.vision[17] = temp[2];\r\n\r\n        temp = this.lookInDirection(createVector(0, 1));\r\n\r\n        this.vision[18] = temp[0];\r\n        this.vision[19] = temp[1];\r\n        this.vision[20] = temp[2];\r\n\r\n        temp = this.lookInDirection(createVector(-1, 1));\r\n\r\n        this.vision[21] = temp[0];\r\n        this.vision[22] = temp[1];\r\n        this.vision[23] = temp[2];\r\n    }\r\n\r\n    /**\r\n     * Look in a direction and check for food, body and wall.\r\n     * @param direction \r\n     */\r\n    lookInDirection(direction: p5.Vector): number[]\r\n    {\r\n        let look = new Array(3).fill(0)\r\n        let position = createVector(this.head.x, this.head.y);\r\n        let distance: number = 0;\r\n        let foodFound: boolean = false;\r\n        let bodyFound: boolean = false;\r\n\r\n        position.add(direction);\r\n        distance += 1;\r\n\r\n        while (!this.wallCollide(position.x, position.y))\r\n        {\r\n            if (!foodFound && this.foodCollide(position.x, position.y))\r\n            {\r\n                foodFound = true;\r\n                look[0] = 1;\r\n            }\r\n\r\n            if (!bodyFound && this.bodyCollide(position.x, position.y))\r\n            {\r\n                bodyFound = true;\r\n                look[1] = 1;\r\n            }\r\n\r\n            if (this.replay && seeVision)\r\n            {\r\n                stroke(0, 255, 0);\r\n                point(position.x, position.y);\r\n\r\n                if (foodFound)\r\n                {\r\n                    noStroke();\r\n                    fill(255, 255, 51);\r\n                    ellipseMode(CENTER);\r\n                    ellipse(position.x, position.y, 5, 5);\r\n                }\r\n\r\n                if (bodyFound)\r\n                {\r\n                    noStroke();\r\n                    fill(102, 0, 102);\r\n                    ellipseMode(CENTER);\r\n                    ellipse(position.x, position.y, 5, 5);\r\n                }\r\n            }\r\n\r\n            position.add(direction);\r\n            distance += 1;\r\n        }\r\n\r\n        if (this.replay && seeVision)\r\n        {\r\n            noStroke();\r\n            fill(0, 255, 0);\r\n            ellipseMode(CENTER);\r\n            ellipse(position.x, position.y, 5, 5);\r\n        }\r\n\r\n        look[2] = 1 / distance;\r\n\r\n        return look;\r\n    }\r\n\r\n    /**\r\n     * Think about what direction to move.\r\n     */\r\n    think()\r\n    {\r\n        this.decision = this.brain.output(this.vision);\r\n\r\n        let maxIndex = 0;\r\n        let max = 0;\r\n\r\n        for (let i = 0; i < this.decision.length; i++)\r\n        {\r\n            if (this.decision[i] > max)\r\n            {\r\n                max = this.decision[i];\r\n                maxIndex = i;\r\n            }\r\n        }\r\n\r\n        switch (maxIndex)\r\n        {\r\n            case 0:\r\n                this.moveUp();\r\n                break;\r\n            case 1:\r\n                this.moveDown();\r\n                break;\r\n            case 2:\r\n                this.moveLeft();\r\n                break;\r\n            case 3:\r\n                this.moveRight();\r\n                break;\r\n        }\r\n    }\r\n\r\n    moveUp(): void\r\n    {\r\n        if (this.direction.y != 1)\r\n        {\r\n            this.direction.x = 0;\r\n            this.direction.y = -1;\r\n        }\r\n    }\r\n\r\n    moveDown(): void\r\n    {\r\n        if (this.direction.y != -1)\r\n        {\r\n            this.direction.x = 0;\r\n            this.direction.y = 1;\r\n        }\r\n    }\r\n\r\n    moveLeft(): void\r\n    {\r\n        if (this.direction.x != 1)\r\n        {\r\n            this.direction.x = -1;\r\n            this.direction.y = 0;\r\n        }\r\n    }\r\n\r\n    moveRight(): void\r\n    {\r\n        if (this.direction.x != -1)\r\n        {\r\n            this.direction.x = 1;\r\n            this.direction.y = 0;\r\n        }\r\n    }\r\n}\r\n","/// <reference path=\"./global.d.ts\" />\r\n\r\nimport * as p5_global from \"p5/global\"\r\nimport * as p5 from \"p5\"\r\n\r\nimport { Button } from \"./Button\";\r\nimport { Snake } from \"./Snake\";\r\nimport { Population } from \"./Population\";\r\n\r\nwindow.DPC = 20;\r\nwindow.SIZE = 40;\r\nwindow.HIDDEN_NODES = 16;\r\nwindow.HIDDEN_LARYERS = 2;\r\nwindow.FPS = 100;\r\n\r\nwindow.highscore = 0;\r\nwindow.mutationRate = 0.05;\r\nwindow.defaultMutation = mutationRate;\r\nwindow.humanPlaying = false; // False for AI, true to play yourself\r\nwindow.replayBest = true; // Shows only the best of each generation\r\nwindow.seeVision = false; // See the snakes vision\r\nwindow.modelLoaded = false;\r\n\r\nlet increaseMutationBtn: Button;\r\nlet decreaseMutationBtn: Button;\r\n\r\nlet snake: Snake;\r\nlet model: Snake;\r\nlet population: Population;\r\n\r\nwindow.setup = function (): void\r\n{\r\n    createCanvas(1280, 800);\r\n\r\n    increaseMutationBtn = new Button(320, 125, 20, 20, \"+\");\r\n    decreaseMutationBtn = new Button(345, 125, 20, 20, \"-\");\r\n\r\n    frameRate(FPS);\r\n\r\n    if (humanPlaying)\r\n    {\r\n        snake = new Snake();\r\n    }\r\n    else\r\n    {\r\n        population = new Population(2000); // Adjust size of population\r\n    }\r\n}\r\n\r\nwindow.draw = function (): void\r\n{\r\n    background(0);\r\n    noFill();\r\n    stroke(255);\r\n    rectMode(CORNER);\r\n\r\n    if (humanPlaying)\r\n    {\r\n        snake.move();\r\n        snake.show();\r\n\r\n        fill(150);\r\n        textSize(20);\r\n        text(\"SCORE : \" + snake.score, 500, 50);\r\n\r\n        if (snake.dead)\r\n        {\r\n            snake = new Snake();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (!modelLoaded)\r\n        {\r\n            if (population.done())\r\n            {\r\n                highscore = population.bestSnake.score;\r\n                population.calculateFitness();\r\n                population.naturalSelection();\r\n            } \r\n            else\r\n            {\r\n                population.update();\r\n                population.show();\r\n            }\r\n\r\n            fill(150);\r\n            textSize(25);\r\n            textAlign(LEFT);\r\n\r\n            text(\"BEST FITNESS: \" + population.bestFitness, 105, 25);\r\n            text(\"MOVES LEFT: \" + population.bestSnake.lifeLeft, 105, 50);\r\n            text(\"GEN: \" + population.gen, 105, 75);\r\n            text(\"MUTATION RATE: \" + mutationRate * 100 + \"%\", 105, 100);\r\n\r\n            text(\"SCORE : \" + population.bestSnake.score, 105, height - 45);\r\n            text(\"HIGHSCORE : \" + highscore, 105, height - 15);\r\n\r\n            increaseMutationBtn.show();\r\n            decreaseMutationBtn.show();\r\n        }\r\n        else\r\n        {\r\n            model.look();\r\n            model.think();\r\n            model.move();\r\n            model.show(400, 0);\r\n            model.brain.show(0, 0, 360, 790, model.vision, model.decision);\r\n\r\n            if (model.dead)\r\n            {\r\n                let newmodel = new Snake();\r\n                newmodel.brain = model.brain.clone();\r\n                model = newmodel;\r\n            }\r\n\r\n            textSize(25);\r\n            fill(150);\r\n            textAlign(LEFT);\r\n            text(\"SCORE : \" + model.score, 120, height - 45);\r\n        }\r\n\r\n        textAlign(LEFT);\r\n        textSize(18);\r\n        fill(255, 0, 0);\r\n        text(\"RED < 0\", 120, height - 75);\r\n        fill(0, 0, 255);\r\n        text(\"BLUE > 0\", 200, height - 75);\r\n    }\r\n\r\n}\r\n\r\nwindow.mousePressed = function (): void\r\n{\r\n    if (increaseMutationBtn.collide(mouseX, mouseY))\r\n    {\r\n        mutationRate *= 2;\r\n        defaultMutation = mutationRate;\r\n    }\r\n\r\n    if (decreaseMutationBtn.collide(mouseX, mouseY))\r\n    {\r\n        mutationRate /= 2;\r\n        defaultMutation = mutationRate;\r\n    }\r\n}\r\n\r\nwindow.keyPressed = function (): void\r\n{\r\n    if (humanPlaying)\r\n    {\r\n        switch (keyCode)\r\n        {\r\n            case UP_ARROW:\r\n                snake.moveUp();\r\n                break;\r\n            case DOWN_ARROW:\r\n                snake.moveDown();\r\n                break;\r\n            case LEFT_ARROW:\r\n                snake.moveLeft();\r\n                break;\r\n            case RIGHT_ARROW:\r\n                snake.moveRight();\r\n                break;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}